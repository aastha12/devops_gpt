###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["JudgeEvaluation","RootCauseAnalysis",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def JudgeEvaluation(self) -> "JudgeEvaluationAst":
        return JudgeEvaluationAst(self)

    @property
    def RootCauseAnalysis(self) -> "RootCauseAnalysisAst":
        return RootCauseAnalysisAst(self)





class JudgeEvaluationAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("JudgeEvaluation")
        self._properties: typing.Set[str] = set([ "score",  "justification", ])
        self._props = JudgeEvaluationProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "JudgeEvaluationProperties":
        return self._props


class JudgeEvaluationViewer(JudgeEvaluationAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class JudgeEvaluationProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def score(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("score"))

    @property
    def justification(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("justification"))

    

class RootCauseAnalysisAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("RootCauseAnalysis")
        self._properties: typing.Set[str] = set([ "reasoning",  "root_cause_summary",  "troubleshooting_steps", ])
        self._props = RootCauseAnalysisProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "RootCauseAnalysisProperties":
        return self._props


class RootCauseAnalysisViewer(RootCauseAnalysisAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class RootCauseAnalysisProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def reasoning(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("reasoning"))

    @property
    def root_cause_summary(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("root_cause_summary"))

    @property
    def troubleshooting_steps(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("troubleshooting_steps"))

    




__all__ = ["TypeBuilder"]